import streamlit as st
import google.generativeai as genai
from PIL import Image
import io
import base64
from datetime import datetime
import tiktoken
import json
import time
import re
import sqlite3
import hashlib
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# C·∫•u h√¨nh trang
st.set_page_config(page_title="Tr√≤ chuy·ªán ƒêa ph∆∞∆°ng ti·ªán v·ªõi Gemini", layout="wide", page_icon="üöÄ")

# Kh·ªüi t·∫°o tr·∫°ng th√°i phi√™n
if "messages" not in st.session_state:
    st.session_state.messages = []
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []
if "image" not in st.session_state:
    st.session_state.image = None
if "model_config" not in st.session_state:
    st.session_state.model_config = {
        "model_name": "gemini-1.5-flash-latest",
        "temperature": 0.7,
        "top_p": 1.0,
        "top_k": 40,
        "max_output_tokens": 2048,
    }
if "system_prompt" not in st.session_state:
    st.session_state.system_prompt = "B·∫°n l√† m·ªôt tr·ª£ l√Ω AI h·ªØu √≠ch v√† th√¢n thi·ªán ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi tanbaycu. "
if "total_tokens" not in st.session_state:
    st.session_state.total_tokens = 0
if "theme" not in st.session_state:
    st.session_state.theme = "light"
if "font_size" not in st.session_state:
    st.session_state.font_size = "medium"

GEMINI_MODELS = [
    "gemini-1.5-flash-latest",
    "gemini-2.0-flash-exp",
    "gemini-1.5-flash-8b",
    "gemini-2.0-pro-exp-02-05",
    "gemini-2.0-flash-lite-preview-02-05"
]

MAX_TOKENS = 8192

# CSS t√πy ch·ªânh
def get_custom_css():
    return f"""
<style>
    .stButton > button {{width: 100%;}}
    .stTextInput > div > div > input {{background-color: {'#f0f2f6' if st.session_state.theme == 'light' else '#2b313e'};}}
    .sidebar .stButton > button {{background-color: #4CAF50; color: white;}}
    .sidebar .stButton > button:hover {{background-color: #45a049;}}
    .chat-message {{
        padding: 1rem; 
        border-radius: 0.5rem; 
        margin-bottom: 1rem; 
        display: flex;
        font-size: {{'0.8rem' if st.session_state.font_size == 'small' else '1rem' if st.session_state.font_size == 'medium' else '1.2rem'}};
        animation: fadeIn 0.5s;
    }}
    @keyframes fadeIn {{
        0% {{ opacity: 0; }}
        100% {{ opacity: 1; }}
    }}
    .chat-message.user {{background-color: {'#e6f3ff' if st.session_state.theme == 'light' else '#2b313e'};}}
    .chat-message.bot {{background-color: {'#f0f0f0' if st.session_state.theme == 'light' else '#3c4354'};}}
    .chat-message .avatar {{width: 15%; padding-right: 0.5rem;}}
    .chat-message .avatar img {{max-width: 40px; max-height: 40px; border-radius: 50%;}}
    .chat-message .message {{width: 85%; padding: 0 1.5rem;}}
    .chat-message .timestamp {{font-size: 0.8em; color: {'#a0a0a0' if st.session_state.theme == 'light' else '#cccccc'}; text-align: right; margin-top: 0.5rem;}}
    .token-info {{font-size: 0.8em; color: {'#a0a0a0' if st.session_state.theme == 'light' else '#cccccc'}; margin-top: 0.5rem;}}
    body {{background-color: {'#ffffff' if st.session_state.theme == 'light' else '#1e1e1e'}; color: {'#000000' if st.session_state.theme == 'light' else '#ffffff'};}}
    .stAlert {{animation: slideIn 0.5s;}}
    @keyframes slideIn {{
        0% {{ transform: translateY(-100%); }}
        100% {{ transform: translateY(0); }}
    }}
</style>
"""

st.markdown(get_custom_css(), unsafe_allow_html=True)

# C√°c h√†m ti·ªán √≠ch
@st.cache_resource
def load_model(api_key, model_name):
    try:
        genai.configure(api_key=api_key)
        return genai.GenerativeModel(model_name=model_name)
    except Exception as e:
        st.error(f"L·ªói kh·ªüi t·∫°o m√¥ h√¨nh: {str(e)}")
        return None

@st.cache_data
def get_image_download_link(_img, filename, text):
    buffered = io.BytesIO()
    _img.save(buffered, format="PNG")
    img_str = base64.b64encode(buffered.getvalue()).decode()
    href = f'<a href="data:file/png;base64,{img_str}" download="{filename}">{text}</a>'
    return href

def get_chat_history():
    return "\n".join([f"{msg['role']}: {msg['content']}" for msg in st.session_state.chat_history[-st.session_state.max_history:]])

@st.cache_data
def count_tokens(text):
    encoding = tiktoken.get_encoding("cl100k_base")
    return len(encoding.encode(text))

def rate_limited_response(func):
    def wrapper(*args, **kwargs):
        if 'last_request_time' not in st.session_state:
            st.session_state.last_request_time = 0
        
        current_time = time.time()
        time_since_last_request = current_time - st.session_state.last_request_time
        
        if time_since_last_request < 1:
            time.sleep(1 - time_since_last_request)
        
        result = func(*args, **kwargs)
        st.session_state.last_request_time = time.time()
        return result
    return wrapper

@rate_limited_response
def handle_user_input(user_input, model):
    start_time = time.time()
    sanitized_input = sanitize_input(user_input)
    chat_history = get_chat_history()
    full_prompt = f"{st.session_state.system_prompt}\n\nL·ªãch s·ª≠ tr√≤ chuy·ªán:\n{chat_history}\n\nNg∆∞·ªùi d√πng: {sanitized_input}\n\nTr·ª£ l√Ω:"
    
    inputs = [full_prompt]
    if st.session_state.image:
        inputs.append(st.session_state.image)
    
    try:
        with st.spinner('ü§î ƒêang t·∫°o ph·∫£n h·ªìi...'):
            response = model.generate_content(
                inputs,
                generation_config=genai.types.GenerationConfig(
                    temperature=st.session_state.model_config["temperature"],
                    top_p=st.session_state.model_config["top_p"],
                    top_k=st.session_state.model_config["top_k"],
                    max_output_tokens=st.session_state.model_config["max_output_tokens"],
                )
            )
        response_tokens = count_tokens(response.text)
        st.session_state.total_tokens += response_tokens
        processing_time = time.time() - start_time
        return response.text, response_tokens, processing_time
    except Exception as e:
        st.error(f"L·ªói t·∫°o ph·∫£n h·ªìi: {str(e)}")
        return None, 0, 0

def sanitize_input(text):
    text = re.sub('<[^<]+?>', '', text)
    text = text.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace('"', '&quot;').replace("'", '&#39;')
    return text

def save_chat_session():
    session_data = {
        "messages": st.session_state.messages,
        "chat_history": st.session_state.chat_history,
        "total_tokens": st.session_state.total_tokens
    }
    return json.dumps(session_data)

def load_chat_session(session_data):
    data = json.loads(session_data)
    st.session_state.messages = data["messages"]
    st.session_state.chat_history = data["chat_history"]
    st.session_state.total_tokens = data["total_tokens"]

def is_valid_api_key(api_key):
    return bool(api_key) and len(api_key) > 10

def format_processing_time(seconds):
    return f"{seconds:.1f}s"

def init_db():
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    
    # Ki·ªÉm tra xem b·∫£ng users ƒë√£ t·ªìn t·∫°i ch∆∞a
    c.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='users'")
    table_exists = c.fetchone()
    
    if table_exists:
        # Ki·ªÉm tra s·ªë c·ªôt hi·ªán t·∫°i
        c.execute("PRAGMA table_info(users)")
        columns = c.fetchall()
        if len(columns) == 3:  # N·∫øu ch·ªâ c√≥ 3 c·ªôt
            # Th√™m c·ªôt email
            c.execute("ALTER TABLE users ADD COLUMN email TEXT")
            conn.commit()
            print("ƒê√£ th√™m c·ªôt email v√†o b·∫£ng users")
    else:
        # T·∫°o b·∫£ng m·ªõi v·ªõi 4 c·ªôt
        c.execute('''CREATE TABLE users
                     (username TEXT PRIMARY KEY, password TEXT, api_key TEXT, email TEXT)''')
        conn.commit()
        print("ƒê√£ t·∫°o b·∫£ng users m·ªõi")
    
    conn.close()

# G·ªçi h√†m init_db() khi kh·ªüi ƒë·ªông ·ª©ng d·ª•ng
init_db()

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def register_user(username, password, api_key, email):
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    hashed_password = hash_password(password)
    try:
        c.execute("INSERT INTO users (username, password, api_key, email) VALUES (?, ?, ?, ?)", 
                  (username, hashed_password, api_key, email))
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        return False
    finally:
        conn.close()

def authenticate_user(username, password):
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute("SELECT password, api_key, email FROM users WHERE username = ?", (username,))
    result = c.fetchone()
    conn.close()
    if result and result[0] == hash_password(password):
        return result[1], result[2]  # Return API key and email
    return None, None

# H√†m g·ª≠i email
def send_email(to_email, subject, body):
    # C·∫•u h√¨nh email c·ªßa b·∫°n
    sender_email = "testuserbaycu@gmail.com"
    sender_password = "jqzq kbqh hywd gmxw"

    msg = MIMEMultipart()
    msg['From'] = sender_email
    msg['To'] = to_email
    msg['Subject'] = subject

    msg.attach(MIMEText(body, 'html'))

    try:
        server = smtplib.SMTP('smtp.gmail.com', 587)
        server.starttls()
        server.login(sender_email, sender_password)
        text = msg.as_string()
        server.sendmail(sender_email, to_email, text)
        server.quit()
        return True
    except Exception as e:
        st.error(f"L·ªói g·ª≠i email: {str(e)}")
        return False



# Thanh b√™n
with st.sidebar:
    st.title("C√†i ƒë·∫∑t")
    
    if 'user' not in st.session_state:
        st.session_state.user = None

    if not st.session_state.user:
        tab1, tab2 = st.tabs(["ƒêƒÉng nh·∫≠p", "ƒêƒÉng k√Ω"])
        
        with tab1:
            login_username = st.text_input("T√™n ƒëƒÉng nh·∫≠p", key="login_username")
            login_password = st.text_input("M·∫≠t kh·∫©u", type="password", key="login_password")
            if st.button("ƒêƒÉng nh·∫≠p"):
                api_key, email = authenticate_user(login_username, login_password)
                if api_key:
                    st.session_state.user = login_username
                    st.session_state.api_key = api_key
                    st.session_state.email = email
                    st.success("ƒêƒÉng nh·∫≠p th√†nh c√¥ng!")
                    st.rerun()
                else:
                    st.error("ƒêƒÉng nh·∫≠p th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra l·∫°i t√™n ƒëƒÉng nh·∫≠p v√† m·∫≠t kh·∫©u.")
        
        with tab2:
            reg_username = st.text_input("T√™n ƒëƒÉng nh·∫≠p", key="reg_username")
            reg_password = st.text_input("M·∫≠t kh·∫©u", type="password", key="reg_password")
            reg_email = st.text_input("Email", key="reg_email")
            reg_api_key = st.text_input("Google API Key", type="password", key="reg_api_key")
            if st.button("ƒêƒÉng k√Ω"):
                if register_user(reg_username, reg_password, reg_api_key, reg_email):
                    st.success("ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ƒëƒÉng nh·∫≠p.")
                    current_date = datetime.now().strftime("%d/%m/%Y")
                    
                    # G·ª≠i email x√°c nh·∫≠n ƒëƒÉng k√Ω
                    email_subject = "X√°c nh·∫≠n ƒëƒÉng k√Ω t√†i kho·∫£n Gemini Agent - Ch√†o m·ª´ng b·∫°n!"
                    email_body = f"""
                    <html>
                    <head>
                        <style>
                            body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
                            .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
                            .header {{ background-color: #4CAF50; color: white; padding: 10px; text-align: center; }}
                            .content {{ padding: 20px; background-color: #f9f9f9; }}
                            .footer {{ text-align: center; margin-top: 20px; font-size: 0.8em; color: #777; }}
                        </style>
                    </head>
                    <body>
                        <div class="container">
                            <div class="header">
                                <h1>Ch√†o m·ª´ng ƒë·∫øn v·ªõi Gemini Agent</h1>
                            </div>
                            <div class="content">
                                <p>K√≠nh g·ª≠i {reg_username},</p>
                                <p>Ch√∫ng t√¥i xin ch√¢n th√†nh c·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n Gemini Agent. Ch√∫ng t√¥i r·∫•t vui m·ª´ng ƒë∆∞·ª£c ch√†o ƒë√≥n b·∫°n tham gia v√†o c·ªông ƒë·ªìng c·ªßa ch√∫ng t√¥i.</p>
                                <p>D∆∞·ªõi ƒë√¢y l√† th√¥ng tin ƒëƒÉng k√Ω c·ªßa b·∫°n:</p>
                                <ul>
                                    <li><strong>T√™n ƒëƒÉng nh·∫≠p:</strong> {reg_username}</li>
                                    <li><strong>Email:</strong> {reg_email}</li>
                                    <li><strong>Ng√†y ƒëƒÉng k√Ω:</strong> {current_date}</li>
                                </ul>
                                <p>V·ªõi t√†i kho·∫£n Gemini Agent, b·∫°n s·∫Ω c√≥ c∆° h·ªôi:</p>
                                <ul>
                                    <li>Tr·∫£i nghi·ªám s·ª©c m·∫°nh c·ªßa c√°c m√¥ h√¨nh AI ti√™n ti·∫øn nh·∫•t</li>
                                    <li>T√πy ch·ªânh v√† t·ªëi ∆∞u h√≥a m√¥ h√¨nh theo nhu c·∫ßu c·ª• th·ªÉ c·ªßa b·∫°n</li>
                                    <li>Tham gia v√†o c·ªông ƒë·ªìng ng∆∞·ªùi d√πng nƒÉng ƒë·ªông v√† s√°ng t·∫°o</li>
                                </ul>
                                <p>Ch√∫ng t√¥i cam k·∫øt mang ƒë·∫øn cho b·∫°n tr·∫£i nghi·ªám tuy·ªát v·ªùi nh·∫•t v·ªõi Gemini Agent. N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ c√¢u h·ªèi ho·∫∑c c·∫ßn h·ªó tr·ª£, ƒë·ª´ng ng·∫ßn ng·∫°i li√™n h·ªá v·ªõi ƒë·ªôi ng≈© h·ªó tr·ª£ c·ªßa ch√∫ng t√¥i.</p>
                                <p>M·ªôt l·∫ßn n·ªØa, ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Gemini Agent. Ch√∫ng t√¥i r·∫•t mong ƒë∆∞·ª£c ƒë·ªìng h√†nh c√πng b·∫°n trong h√†nh tr√¨nh kh√°m ph√° v√† s√°ng t·∫°o v·ªõi AI.</p>
                                <p>Tr√¢n tr·ªçng,</p>
                                <p>ƒê·ªôi ng≈© Gemini Agent</p>
                            </div>
                            <div class="footer">
                                <p>¬© 2025 Gemini Agent. B·∫£o l∆∞u m·ªçi quy·ªÅn.</p>
                                <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi.</p>
                            </div>
                        </div>
                    </body>
                    </html>
                    """
                    if send_email(reg_email, email_subject, email_body):
                        st.success("Email x√°c nh·∫≠n ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn ƒë·ªãa ch·ªâ email c·ªßa b·∫°n.")
                    else:
                        st.warning("Kh√¥ng th·ªÉ g·ª≠i email x√°c nh·∫≠n. Vui l√≤ng ki·ªÉm tra l·∫°i ƒë·ªãa ch·ªâ email c·ªßa b·∫°n.")
                else:
                    st.error("ƒêƒÉng k√Ω th·∫•t b·∫°i. T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i.")

    else:
        st.sidebar.success(f"ƒê√£ ƒëƒÉng nh·∫≠p: {st.session_state.user}")
        if st.sidebar.button("ƒêƒÉng xu·∫•t"):
            st.session_state.user = None
            st.session_state.api_key = None
            st.session_state.email = None
            st.rerun()

        with st.expander("üõ†Ô∏è T√πy ch·ªânh M√¥ h√¨nh", expanded=False):
            selected_model = st.selectbox("Ch·ªçn m√¥ h√¨nh Gemini", GEMINI_MODELS, index=GEMINI_MODELS.index(st.session_state.model_config["model_name"]))
            st.session_state.model_config["model_name"] = selected_model
            
            st.session_state.model_config["temperature"] = st.slider("üå°Ô∏è ƒê·ªô s√°ng t·∫°o", min_value=0.0, max_value=1.0, value=st.session_state.model_config["temperature"], step=0.1)
            st.session_state.model_config["top_p"] = st.slider("üéØ Top P", min_value=0.0, max_value=1.0, value=st.session_state.model_config["top_p"], step=0.1)
            st.session_state.model_config["top_k"] = st.number_input("üîù Top K", min_value=1, max_value=100, value=st.session_state.model_config["top_k"])
            st.session_state.model_config["max_output_tokens"] = st.number_input("üìè S·ªë token t·ªëi ƒëa", min_value=1, max_value=8192, value=st.session_state.model_config["max_output_tokens"])
        
        with st.expander("üìù T√πy ch·ªânh Prompt", expanded=False):
            st.session_state.system_prompt = st.text_area("System Prompt", value=st.session_state.system_prompt, height=100)
        
        st.session_state.max_history = st.slider("üß† S·ªë l∆∞·ª£ng tin nh·∫Øn t·ªëi ƒëa trong l·ªãch s·ª≠", min_value=1, max_value=100, value=5)
        
        uploaded_file = st.file_uploader("üì∏ T·∫£i l√™n m·ªôt h√¨nh ·∫£nh...", type=["jpg", "jpeg", "png"])

        if uploaded_file:
            st.session_state.image = Image.open(uploaded_file)
            st.image(st.session_state.image, caption='H√¨nh ·∫£nh ƒë√£ t·∫£i l√™n', use_column_width=True)
            st.markdown(get_image_download_link(st.session_state.image, "h√¨nh_·∫£nh_ƒë√£_t·∫£i.png", "üì• T·∫£i xu·ªëng h√¨nh ·∫£nh"), unsafe_allow_html=True)

        with st.expander("‚ò∞ T√πy ch·ªçn n√¢ng cao", expanded=False):
            st.subheader("Qu·∫£n l√Ω phi√™n tr√≤ chuy·ªán")
            
            col1, col2 = st.columns(2)
            with col1:
                if st.button("üóëÔ∏è X√≥a", key="clear_history"):
                    st.session_state.messages = []
                    st.session_state.chat_history = []
                    st.session_state.image = None
                    st.session_state.total_tokens = 0
                    st.rerun()

            with col2:
                if st.button("üì• Xu·∫•t", key="export_history"):
                    chat_history = "\n".join([f"{msg['role']} ({msg.get('timestamp', 'N/A')}): {msg['content']}" for msg in st.session_state.chat_history])
                    st.download_button(
                        label="üì• T·∫£i xu·ªëng",
                        data=chat_history,
                        file_name="lich_su_tro_chuyen.txt",
                        mime="text/plain"
                    )
            
            st.subheader("L∆∞u v√† t·∫£i phi√™n tr√≤ chuy·ªán")
            if st.button("üíæ L∆∞u"):
                session_data = save_chat_session()
                st.download_button(
                    label="üì• T·∫£i xu·ªëng phi√™n tr√≤ chuy·ªán",
                    data=session_data,
                    file_name="phien_tro_chuyen.json",
                    mime="application/json"
                )
            
            uploaded_session = st.file_uploader("üì§ T·∫£i l√™n", type=["json"])
            if uploaded_session is not None:
                session_data = uploaded_session.getvalue().decode("utf-8")
                load_chat_session(session_data)
                st.success("ƒê√£ t·∫£i phi√™n tr√≤ chuy·ªán th√†nh c√¥ng!")

            st.subheader("Th√¥ng tin M√¥ h√¨nh")
            st.info(f"""
            - ü§ñ M√¥ h√¨nh: {st.session_state.model_config['model_name']}
            - üå°Ô∏è ƒê·ªô s√°ng t·∫°o: {st.session_state.model_config['temperature']:.2f}
            - üéØ Top P: {st.session_state.model_config['top_p']:.2f}
            - üîù Top K: {st.session_state.model_config['top_k']}
            - üìè S·ªë token t·ªëi ƒëa: {st.session_state.model_config['max_output_tokens']}
            - üß† S·ªë l∆∞·ª£ng tin nh·∫Øn trong l·ªãch s·ª≠: {st.session_state.max_history}
            - üí¨ T·ªïng s·ªë tin nh·∫Øn: {len(st.session_state.messages)}
            - üî¢ T·ªïng s·ªë token: {st.session_state.total_tokens}
            """)

            st.subheader("S·ª≠ d·ª•ng Token")
            progress = st.session_state.total_tokens / MAX_TOKENS
            st.progress(progress)
            st.text(f"{st.session_state.total_tokens}/{MAX_TOKENS} tokens ƒë√£ s·ª≠ d·ª•ng")

# N·ªôi dung ch√≠nh
st.title("üöÄ Gemini Agent")
st.caption("Tr·∫£i nghi·ªám s·ª©c m·∫°nh c·ªßa c√°c m√¥ h√¨nh Gemini m·ªõi nh·∫•t v·ªõi t√πy ch·ªânh n√¢ng cao. üåü")

if not st.session_state.user:
    st.warning("üîë Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ b·∫Øt ƒë·∫ßu tr√≤ chuy·ªán.")
else:
    if st.session_state.api_key:
        model = load_model(st.session_state.api_key, st.session_state.model_config["model_name"])
        
        if model:
            for msg in st.session_state.chat_history:
                with st.chat_message(msg["role"]):
                    st.markdown(msg["content"])
                    timestamp = msg.get('timestamp', 'N/A')
                    tokens = msg.get('tokens', 'N/A')
                    processing_time = msg.get('processing_time', None)
                    
                    info_text = f"{timestamp} | Tokens: {tokens}"
                    if processing_time and msg["role"] == "assistant":
                        formatted_time = format_processing_time(processing_time)
                        info_text += f" | {formatted_time}"
                    
                    st.markdown(f"<div class='timestamp'>{info_text}</div>", unsafe_allow_html=True)

            prompt = st.chat_input("üí¨ B·∫°n mu·ªën bi·∫øt g√¨?")
            if prompt:
                user_timestamp = datetime.now().strftime("%H:%M:%S")
                user_tokens = count_tokens(prompt)
                
                with st.chat_message("user"):
                    st.markdown(sanitize_input(prompt))
                    st.markdown(f"<div class='timestamp'>{user_timestamp} | Tokens: {user_tokens}</div>", unsafe_allow_html=True)
                
                st.session_state.total_tokens += user_tokens
                st.session_state.chat_history.append({
                    "role": "user",
                    "content": sanitize_input(prompt),
                    "tokens": user_tokens,
                    "timestamp": user_timestamp
                })

                with st.chat_message("assistant"):
                    response, response_tokens, processing_time = handle_user_input(prompt, model)
                    if response:
                        st.markdown(response)
                        timestamp = datetime.now().strftime("%H:%M:%S")
                        formatted_time = format_processing_time(processing_time)
                        st.markdown(f"<div class='timestamp'>{timestamp} | Tokens: {response_tokens} | {formatted_time}</div>", unsafe_allow_html=True)
                        
                        st.session_state.chat_history.append({
                            "role": "assistant",
                            "content": response,
                            "tokens": response_tokens,
                            "timestamp": timestamp,
                            "processing_time": processing_time
                        })

            if st.session_state.image and not prompt:
                st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p c√¢u h·ªèi ƒë·ªÉ ƒëi k√®m v·ªõi h√¨nh ·∫£nh.")
        else:
            st.error("‚ùå Kh√¥ng th·ªÉ kh·ªüi t·∫°o m√¥ h√¨nh. Vui l√≤ng ki·ªÉm tra API key v√† th·ª≠ l·∫°i.")
    else:
        st.error("‚ùå API key kh√¥ng h·ª£p l·ªá. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.")

# Footer
st.markdown("---")
st.markdown("ƒê∆∞·ª£c ph√°t tri·ªÉn v·ªõi ‚ù§Ô∏è b·ªüi tanbaycu")